/**
 * @fileoverview Firestore Security Rules for Inventory Management App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has complete control over their own data tree, and no access to other users' data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, ensuring that each user's data is isolated.
 * - /users/{userId}: User profile information.
 * - /users/{userId}/stores/{storeId}: Stores owned by the user.
 * - /users/{userId}/stores/{storeId}/aisles/{aisleId}: Aisles within a user's store.
 * - /users/{userId}/stores/{storeId}/aisles/{aisleId}/products/{productId}: Products within a user's aisles.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - No global admin roles are defined in this version.
 * - List operations are restricted to the owner of the data.
 *
 * Denormalization for Authorization:
 *  The `storeId`, `aisleId` and `userId` are present on each document, to avoid having to use `get()` calls in the rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId - The user ID to compare with the request's authentication UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the existing owner of the resource.
     * @param {string} userId - The user ID to compare with the resource data and the request's authentication UID.
     * @returns {boolean} True if the user is the existing owner, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profile information.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile with matching UID.
     * @allow (get, update, delete) - Authenticated user accesses their own profile.
     * @deny (create) - Unauthenticated user attempts to create a profile.
     * @deny (get, update, delete) - Authenticated user attempts to access another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for stores owned by a specific user.
     * @path /users/{userId}/stores/{storeId}
     * @allow (create) - Authenticated user creates a store under their own user ID.
     * @allow (get, list, update, delete) - Authenticated user accesses stores under their own user ID.
     * @deny (create) - Unauthenticated user attempts to create a store.
     * @deny (get, list, update, delete) - Authenticated user attempts to access another user's stores.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/stores/{storeId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.storeId == storeId;
      allow update: if isExistingOwner(userId) && request.resource.data.storeId == resource.data.storeId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for aisles within a specific store belonging to a user.
     * @path /users/{userId}/stores/{storeId}/aisles/{aisleId}
     * @allow (create) - Authenticated user creates an aisle under their own user ID and store ID.
     * @allow (get, list, update, delete) - Authenticated user accesses aisles under their own user ID and store ID.
     * @deny (create) - Unauthenticated user attempts to create an aisle.
     * @deny (get, list, update, delete) - Authenticated user attempts to access another user's aisles.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/stores/{storeId}/aisles/{aisleId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.aisleId == aisleId && request.resource.data.storeId == storeId;
      allow update: if isExistingOwner(userId) && request.resource.data.aisleId == resource.data.aisleId && request.resource.data.storeId == resource.data.storeId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for products within a specific aisle, in a specific store, belonging to a user.
     * @path /users/{userId}/stores/{storeId}/aisles/{aisleId}/products/{productId}
     * @allow (create) - Authenticated user creates a product under their own user ID, store ID, and aisle ID.
     * @allow (get, list, update, delete) - Authenticated user accesses products under their own user ID, store ID, and aisle ID.
     * @deny (create) - Unauthenticated user attempts to create a product.
     * @deny (get, list, update, delete) - Authenticated user attempts to access another user's products.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/stores/{storeId}/aisles/{aisleId}/products/{productId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.productId == productId && request.resource.data.aisleId == aisleId && request.resource.data.storeId == storeId;
      allow update: if isExistingOwner(userId) && request.resource.data.productId == resource.data.productId && request.resource.data.aisleId == resource.data.aisleId && request.resource.data.storeId == resource.data.storeId;
      allow delete: if isExistingOwner(userId);
    }

    // The error indicates a permission issue on the `/logins` collection, which is not defined in the provided data model.
    // Since we have no information about the structure or ownership of the `/logins` collection, we must deny all access.
    match /logins/{loginId} {
        // CRITICAL: The `/logins` collection is not defined in the data model. Denying all access by default.
        allow get, list, create, update, delete: if false;
    }
  }
}