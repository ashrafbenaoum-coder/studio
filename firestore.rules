/**
 * @fileoverview Firestore Security Rules for Inventory Management App.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all data. Each user has their own private data tree,
 * and only the user can read or write data within that tree.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only by the user themselves.
 * - /users/{userId}/stores/{storeId}: Stores created by a specific user.
 * - /users/{userId}/stores/{storeId}/aisles/{aisleId}: Aisles within a specific store belonging to a user.
 * - /users/{userId}/stores/{storeId}/aisles/{aisleId}/products/{productId}: Products within a specific aisle, in a specific store, belonging to a user.
 *
 * Key Security Decisions:
 * - Users cannot list all user profiles (the /users collection itself).
 * - Data schema is not strictly enforced in this prototyping phase, but key relationships are validated during write operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Prevents listing all user profiles.
     * @path /users
     * @allow (get) Allow a signed-in user to retrieve a single user profile document using its ID.
     * @deny (list) Prevent any user from listing all user profiles.
     * @principle Prevents unauthorized access to user data by restricting listing on the /users collection.
     */
    match /users {
      allow get: if isSignedIn();
      allow list: if false;
    }

    /**
     * @description Manages user profile information, accessible only by the user themselves.
     * @path /users/{userId}
     * @allow (create) Allow a user to create their own profile if the userId matches their auth UID.
     * @allow (get) Allow a user to read their own profile if the userId matches their auth UID.
     * @allow (update) Allow a user to update their own profile if the userId matches their auth UID and the profile exists.
     * @allow (delete) Allow a user to delete their own profile if the userId matches their auth UID and the profile exists.
     * @deny (create) Deny creating a profile with a userId that does not match the auth UID.
     * @deny (get) Deny reading a profile with a userId that does not match the auth UID.
     * @deny (update) Deny updating a profile with a userId that does not match the auth UID.
     * @deny (delete) Deny deleting a profile with a userId that does not match the auth UID.
     * @principle Enforces document ownership for all operations on the /users/{userId} path.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);

    /**
     * @description Manages stores created by a specific user.
     * @path /users/{userId}/stores/{storeId}
     * @allow (create) Allow the owner to create a store.
     * @allow (get) Allow the owner to read a store.
     * @allow (list) Allow the owner to list their stores.
     * @allow (update) Allow the owner to update a store if it exists.
     * @allow (delete) Allow the owner to delete a store if it exists.
     * @deny (create) Deny creating a store for a different user.
     * @deny (get) Deny reading a store for a different user.
     * @deny (list) Deny listing stores for a different user.
     * @deny (update) Deny updating a store for a different user.
     * @deny (delete) Deny deleting a store for a different user.
     * @principle Enforces document ownership for all operations on the /users/{userId}/stores/{storeId} path.
     */
      match /stores/{storeId} {
        allow create: if isSignedIn() && isOwner(userId);
        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isExistingOwner(userId);
        allow delete: if isSignedIn() && isExistingOwner(userId);

      /**
       * @description Manages aisles within a specific store belonging to a user.
       * @path /users/{userId}/stores/{storeId}/aisles/{aisleId}
       * @allow (create) Allow the owner to create an aisle.
       * @allow (get) Allow the owner to read an aisle.
       * @allow (list) Allow the owner to list their aisles within a store.
       * @allow (update) Allow the owner to update an aisle if it exists.
       * @allow (delete) Allow the owner to delete an aisle if it exists.
       * @deny (create) Deny creating an aisle for a different user or store.
       * @deny (get) Deny reading an aisle for a different user or store.
       * @deny (list) Deny listing aisles for a different user or store.
       * @deny (update) Deny updating an aisle for a different user or store.
       * @deny (delete) Deny deleting an aisle for a different user or store.
       * @principle Enforces document ownership and store association for all operations on the /users/{userId}/stores/{storeId}/aisles/{aisleId} path.
       */
        match /aisles/{aisleId} {
          allow create: if isSignedIn() && isOwner(userId);
          allow get: if isSignedIn() && isOwner(userId);
          allow list: if isSignedIn() && isOwner(userId);
          allow update: if isSignedIn() && isExistingOwner(userId);
          allow delete: if isSignedIn() && isExistingOwner(userId);

        /**
         * @description Manages products within a specific aisle, in a specific store, belonging to a user.
         * @path /users/{userId}/stores/{storeId}/aisles/{aisleId}/products/{productId}
         * @allow (create) Allow the owner to create a product.
         * @allow (get) Allow the owner to read a product.
         * @allow (list) Allow the owner to list their products within an aisle.
         * @allow (update) Allow the owner to update a product if it exists.
         * @allow (delete) Allow the owner to delete a product if it exists.
         * @deny (create) Deny creating a product for a different user, store, or aisle.
         * @deny (get) Deny reading a product for a different user, store, or aisle.
         * @deny (list) Deny listing products for a different user, store, or aisle.
         * @deny (update) Deny updating a product for a different user, store, or aisle.
         * @deny (delete) Deny deleting a product for a different user, store, or aisle.
         * @principle Enforces document ownership, store association, and aisle association for all operations on the /users/{userId}/stores/{storeId}/aisles/{aisleId}/products/{productId} path.
         */
          match /products/{productId} {
            allow create: if isSignedIn() && isOwner(userId);
            allow get: if isSignedIn() && isOwner(userId);
            allow list: if isSignedIn() && isOwner(userId);
            allow update: if isSignedIn() && isExistingOwner(userId);
            allow delete: if isSignedIn() && isExistingOwner(userId);
          }
        }
      }
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && exists(resource);
  }
}