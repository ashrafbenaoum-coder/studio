/**
 * @fileoverview Firestore Security Rules for Inventory Management App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  Each user has full
 * control over their own data, and no access to other users' data. Schema validation
 * is relaxed to allow for rapid prototyping, focusing on authorization.
 *
 * Data Structure:
 * The data is organized hierarchically under `/users/{userId}`. Each user can
 * create and manage their own stores, aisles, and products.
 *
 * Key Security Decisions:
 * - Users can only access their own user document (`/users/{userId}`).
 * - Listing of users is disallowed.
 * - Stores, aisles, and products are all nested under the user's ID and are
 *   therefore only accessible by that user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the user's profile document.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (get) Authenticated user can read their own profile.
     * @allow (create) Authenticated user can create their own profile.
     * @allow (update) Authenticated user can update their own profile.
     * @allow (delete) Authenticated user can delete their own profile.
     * @deny (list) Listing all users is not permitted.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.email == resource.data.email;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to stores created by a specific user.
     * @path /databases/{database}/documents/users/{userId}/stores/{storeId}
     * @allow (get) Authenticated user can read their own stores.
     * @allow (create) Authenticated user can create their own stores.
     * @allow (update) Authenticated user can update their own stores.
     * @allow (delete) Authenticated user can delete their own stores.
     * @deny Access to other users' stores is not permitted.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/stores/{storeId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }
        allow get: if isSignedIn() && isOwner(userId);
        allow list: if false;
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isExistingOwner(userId);
        allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to aisles within a specific store belonging to a user.
     * @path /databases/{database}/documents/users/{userId}/stores/{storeId}/aisles/{aisleId}
     * @allow (get) Authenticated user can read their own aisles.
     * @allow (create) Authenticated user can create their own aisles.
     * @allow (update) Authenticated user can update their own aisles.
     * @allow (delete) Authenticated user can delete their own aisles.
     * @deny Access to other users' aisles is not permitted.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/stores/{storeId}/aisles/{aisleId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }
        allow get: if isSignedIn() && isOwner(userId);
        allow list: if false;
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isExistingOwner(userId);
        allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to products within a specific aisle, in a specific store, belonging to a user.
     * @path /databases/{database}/documents/users/{userId}/stores/{storeId}/aisles/{aisleId}/products/{productId}
     * @allow (get) Authenticated user can read their own products.
     * @allow (create) Authenticated user can create their own products.
     * @allow (update) Authenticated user can update their own products.
     * @allow (delete) Authenticated user can delete their own products.
     * @deny Access to other users' products is not permitted.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/stores/{storeId}/aisles/{aisleId}/products/{productId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }
        allow get: if isSignedIn() && isOwner(userId);
        allow list: if false;
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isExistingOwner(userId);
        allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}