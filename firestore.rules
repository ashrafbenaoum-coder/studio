/**
 * @fileoverview Firestore Security Rules for the inventory management application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has full control over their
 * own data tree, including stores, aisles, and products. No cross-user access is permitted.
 *
 * Data Structure:
 * The data is organized hierarchically under the `/users/{userId}` collection. Each user owns
 * a subcollection of stores, and each store contains subcollections of aisles, and each aisle contains
 * a subcollection of products.
 *
 * Key Security Decisions:
 * - Users can only access their own profile information.
 * - Users can only create, read, update, and delete stores, aisles, and products that they own.
 * - Listing of user profiles is disallowed for privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (get) Authenticated user can read their own profile.
     * @allow (create) Authenticated user can create their own profile.
     * @allow (update) Authenticated user can update their own profile.
     * @allow (delete) Authenticated user can delete their own profile.
     * @deny (get) Authenticated user cannot read another user's profile.
     * @deny (list) Listing all users is not allowed.
     * @deny (create) Unauthenticated user cannot create a profile.
     * @deny (update) Unauthenticated user cannot update a profile.
     * @deny (delete) Unauthenticated user cannot delete a profile.
     * @principle Enforces user-ownership and prevents unauthorized profile access.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to stores owned by a specific user.
     * @path /users/{userId}/stores/{storeId}
     * @allow (get) Authenticated user can read their own store.
     * @allow (list) Authenticated user can list their own stores.
     * @allow (create) Authenticated user can create a store under their profile.
     * @allow (update) Authenticated user can update their own store.
     * @allow (delete) Authenticated user can delete their own store.
     * @deny (get) Authenticated user cannot read another user's store.
     * @deny (create) Unauthenticated user cannot create a store.
     * @deny (update) Unauthenticated user cannot update another user's store.
     * @deny (delete) Unauthenticated user cannot delete another user's store.
     * @principle Enforces user-ownership for store data.
     */
    match /users/{userId}/stores/{storeId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      
      // Helper function to check if the user is the owner of the document and it exists
      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
      }
      
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to aisles within a specific store owned by a user.
     * @path /users/{userId}/stores/{storeId}/aisles/{aisleId}
     * @allow (get) Authenticated user can read their own aisle.
     * @allow (list) Authenticated user can list their own aisles.
     * @allow (create) Authenticated user can create an aisle under their store.
     * @allow (update) Authenticated user can update their own aisle.
     * @allow (delete) Authenticated user can delete their own aisle.
     * @deny (get) Authenticated user cannot read another user's aisle.
     * @deny (create) Unauthenticated user cannot create an aisle.
     * @deny (update) Unauthenticated user cannot update another user's aisle.
     * @deny (delete) Unauthenticated user cannot delete another user's aisle.
     * @principle Enforces user-ownership for aisle data.
     */
    match /users/{userId}/stores/{storeId}/aisles/{aisleId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner of the document and it exists
      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to products within a specific aisle, in a specific store, owned by a user.
     * @path /users/{userId}/stores/{storeId}/aisles/{aisleId}/products/{productId}
     * @allow (get) Authenticated user can read their own product.
     * @allow (list) Authenticated user can list their own products.
     * @allow (create) Authenticated user can create a product under their aisle.
     * @allow (update) Authenticated user can update their own product.
     * @allow (delete) Authenticated user can delete their own product.
     * @deny (get) Authenticated user cannot read another user's product.
     * @deny (create) Unauthenticated user cannot create a product.
     * @deny (update) Unauthenticated user cannot update another user's product.
     * @deny (delete) Unauthenticated user cannot delete another user's product.
     * @principle Enforces user-ownership for product data.
     */
    match /users/{userId}/stores/{storeId}/aisles/{aisleId}/products/{productId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner of the document and it exists
      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}