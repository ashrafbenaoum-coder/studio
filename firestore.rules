/**
 * @fileoverview Firestore Security Rules for Inventory Management App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has complete control over their own data,
 * including stores, aisles, and products. No data is shared between users.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, ensuring clear ownership and isolation.
 *   - /users/{userId} : User profile information.
 *   - /users/{userId}/stores/{storeId} : Stores owned by the user.
 *   - /users/{userId}/stores/{storeId}/aisles/{aisleId} : Aisles within a store.
 *   - /users/{userId}/stores/{storeId}/aisles/{aisleId}/products/{productId} : Products in an aisle.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Listing all users is disallowed.
 *
 * Denormalization for Authorization:
 *  - N/A: The data structure inherently supports owner-only access, so denormalization is not required.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Prevents listing all users. User profiles are only accessible by the user themselves.
     * @path /users
     * @allow (get) User with matching {userId} can get their profile.
     * @deny (list) No user can list all user profiles.
     * @principle Prevents unauthorized access to user data.
     */
    match /users {
      allow get: if false;
      allow list: if false;
    }

    /**
     * @description Manages user profile information.
     * @path /users/{userId}
     * @allow (create) Authenticated user with matching {userId} can create their profile.
     * @allow (get) Authenticated user with matching {userId} can get their profile.
     * @allow (update) Authenticated user with matching {userId} can update their profile.
     * @allow (delete) Authenticated user with matching {userId} can delete their profile.
     * @deny (create) Authenticated user cannot create a profile with a mismatched {userId}.
     * @deny (get) Authenticated user cannot get a profile with a mismatched {userId}.
     * @deny (update) Authenticated user cannot update a profile with a mismatched {userId}.
     * @deny (delete) Authenticated user cannot delete a profile with a mismatched {userId}.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages stores created by a specific user.
     * @path /users/{userId}/stores/{storeId}
     * @allow (create) Authenticated user with matching {userId} can create a store.
     * @allow (get) Authenticated user with matching {userId} can get their store.
     * @allow (list) Authenticated user with matching {userId} can list their stores.
     * @allow (update) Authenticated user with matching {userId} can update their store.
     * @allow (delete) Authenticated user with matching {userId} can delete their store.
     * @deny (create) Authenticated user cannot create a store with a mismatched {userId}.
     * @deny (get) Authenticated user cannot get a store with a mismatched {userId}.
     * @deny (list) Authenticated user cannot list stores with a mismatched {userId}.
     * @deny (update) Authenticated user cannot update a store with a mismatched {userId}.
     * @deny (delete) Authenticated user cannot delete a store with a mismatched {userId}.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/stores/{storeId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages aisles within a specific store belonging to a user.
     * @path /users/{userId}/stores/{storeId}/aisles/{aisleId}
     * @allow (create) Authenticated user with matching {userId} can create an aisle.
     * @allow (get) Authenticated user with matching {userId} can get their aisle.
     * @allow (list) Authenticated user with matching {userId} can list their aisles.
     * @allow (update) Authenticated user with matching {userId} can update their aisle.
     * @allow (delete) Authenticated user with matching {userId} can delete their aisle.
     * @deny (create) Authenticated user cannot create an aisle with a mismatched {userId}.
     * @deny (get) Authenticated user cannot get an aisle with a mismatched {userId}.
     * @deny (list) Authenticated user cannot list aisles with a mismatched {userId}.
     * @deny (update) Authenticated user cannot update an aisle with a mismatched {userId}.
     * @deny (delete) Authenticated user cannot delete an aisle with a mismatched {userId}.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/stores/{storeId}/aisles/{aisleId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages products within a specific aisle, in a specific store, belonging to a user.
     * @path /users/{userId}/stores/{storeId}/aisles/{aisleId}/products/{productId}
     * @allow (create) Authenticated user with matching {userId} can create a product.
     * @allow (get) Authenticated user with matching {userId} can get their product.
     * @allow (list) Authenticated user with matching {userId} can list their products.
     * @allow (update) Authenticated user with matching {userId} can update their product.
     * @allow (delete) Authenticated user with matching {userId} can delete their product.
     * @deny (create) Authenticated user cannot create a product with a mismatched {userId}.
     * @deny (get) Authenticated user cannot get a product with a mismatched {userId}.
     * @deny (list) Authenticated user cannot list products with a mismatched {userId}.
     * @deny (update) Authenticated user cannot update a product with a mismatched {userId}.
     * @deny (delete) Authenticated user cannot delete a product with a mismatched {userId}.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/stores/{storeId}/aisles/{aisleId}/products/{productId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}