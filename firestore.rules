/**
 * @fileoverview Firestore Security Rules for Inventory Management App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Users can only access and modify data that they explicitly own.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, ensuring data isolation between users.  Each user has their own stores,
 * aisles, and products.
 *
 * Key Security Decisions:
 * - Users cannot list other users' profiles.
 * - All write operations require authentication.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Prevents listing all user profiles.
     * @path /users
     * @allow (get) Authenticated users can retrieve their profile data.
     * @deny (list) Listing all users is prohibited.
     * @principle Prevents information disclosure by restricting access to user lists.
     */
    match /users {
      allow list: if false;
    }

    /**
     * @description Manages user profile data. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) Authenticated users can create their own profile if the userId matches their auth.uid.
     * @allow (get) Authenticated users can retrieve their own profile data.
     * @allow (update) Authenticated users can update their own profile data.
     * @allow (delete) Authenticated users can delete their own profile data.
     * @deny (create) Users cannot create profiles for other users.
     * @deny (update) Users cannot modify other user's profiles.
     * @deny (delete) Users cannot delete other user's profiles.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages store data for a specific user. Only the owner can read/write store data.
     * @path /users/{userId}/stores/{storeId}
     * @allow (create) Authenticated user can create a store under their userId.
     * @allow (get) Authenticated user can read their own store data.
     * @allow (list) Authenticated user can list their own stores.
     * @allow (update) Authenticated user can update their own store if they own it.
     * @allow (delete) Authenticated user can delete their own store if they own it.
     * @deny (create) Users cannot create stores under other user's id.
     * @deny (update) Users cannot modify other user's stores.
     * @deny (delete) Users cannot delete stores that do not belong to them.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/stores/{storeId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Manages aisle data for a specific store and user. Only the owner can read/write aisle data.
     * @path /users/{userId}/stores/{storeId}/aisles/{aisleId}
     * @allow (create) Authenticated user can create an aisle under their store if they own it.
     * @allow (get) Authenticated user can read their own aisle data.
     * @allow (list) Authenticated user can list their own aisles.
     * @allow (update) Authenticated user can update their own aisle if they own it.
     * @allow (delete) Authenticated user can delete their own aisle if they own it.
     * @deny (create) Users cannot create aisles under other user's stores.
     * @deny (update) Users cannot modify other user's aisles.
     * @deny (delete) Users cannot delete aisles that do not belong to them.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/stores/{storeId}/aisles/{aisleId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Manages product data for a specific aisle, store and user. Only the owner can read/write product data.
     * @path /users/{userId}/stores/{storeId}/aisles/{aisleId}/products/{productId}
     * @allow (create) Authenticated user can create a product under their aisle if they own it.
     * @allow (get) Authenticated user can read their own product data.
     * @allow (list) Authenticated user can list their own products.
     * @allow (update) Authenticated user can update their own product if they own it.
     * @allow (delete) Authenticated user can delete their own product if they own it.
     * @deny (create) Users cannot create products under other user's aisles.
     * @deny (update) Users cannot modify other user's products.
     * @deny (delete) Users cannot delete products that do not belong to them.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/stores/{storeId}/aisles/{aisleId}/products/{productId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }
  }
}